/**
 * This file was generated by Generator.xtend
 * for the WireframeSketcher screen file detailedRecipe.screen
 * at Tue, 23 Sep 2014 16:11:52 +0200
 */
package application;

import application.AbstractNavigatorController;
import application.AppController;
import application.PropertyResult;
import com.google.common.base.Objects;
import java.util.HashMap;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Node;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.InputOutput;

/**
 * Generated
 */
@SuppressWarnings("all")
public class ScreenNavigatorControllerdetailedRecipe extends AbstractNavigatorController {
  public ScreenNavigatorControllerdetailedRecipe(final Object controller, final HashMap<Long, String> map) {
    super();
    this._appController = ((AppController) controller);
    this.initNavigatorMap();
    InputOutput.<String>println("ScreenNavigatorControllerdetailedRecipe initialized.");
  }
  
  /**
   * Generated
   */
  @FXML
  public void handleActionEvent1(final ActionEvent event) {
    String _screenName = this.getScreenName();
    String _plus = (_screenName + ".screen");
    final Resource resource = this.getResourceForScreenFile(_plus);
    Object _source = event.getSource();
    Object id = this.getPropertyForNode(((Node) _source), "id");
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(id, null));
    if (!_notEquals) {
      _and = false;
    } else {
      boolean _notEquals_1 = (!Objects.equal(id, PropertyResult.NO_SUCH_METHOD));
      _and = _notEquals_1;
    }
    if (_and) {
      this.performActionForWidgetId(resource, ((String) id));
    }
    this.evaluateRules(resource);
  }
  
  /**
   * Generated
   */
  @FXML
  public void handleActionEvent2(final ActionEvent event) {
    String _screenName = this.getScreenName();
    String _plus = (_screenName + ".screen");
    final Resource resource = this.getResourceForScreenFile(_plus);
    Object _source = event.getSource();
    Object id = this.getPropertyForNode(((Node) _source), "id");
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(id, null));
    if (!_notEquals) {
      _and = false;
    } else {
      boolean _notEquals_1 = (!Objects.equal(id, PropertyResult.NO_SUCH_METHOD));
      _and = _notEquals_1;
    }
    if (_and) {
      this.performActionForWidgetId(resource, ((String) id));
    }
    this.evaluateRules(resource);
  }
  
  /**
   * Generated
   */
  @FXML
  public void handleActionEvent3(final ActionEvent event) {
    String _screenName = this.getScreenName();
    String _plus = (_screenName + ".screen");
    final Resource resource = this.getResourceForScreenFile(_plus);
    Object _source = event.getSource();
    Object id = this.getPropertyForNode(((Node) _source), "id");
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(id, null));
    if (!_notEquals) {
      _and = false;
    } else {
      boolean _notEquals_1 = (!Objects.equal(id, PropertyResult.NO_SUCH_METHOD));
      _and = _notEquals_1;
    }
    if (_and) {
      this.performActionForWidgetId(resource, ((String) id));
    }
    this.evaluateRules(resource);
  }
  
  /**
   * Generated
   */
  @FXML
  public void handleActionEvent4(final ActionEvent event) {
    this.loadNewFXMLForScreen(event, "recipe");
  }
  
  /**
   * Generated
   */
  public void initNavigatorMap() {
    HashMap<Long, String> _newHashMap = CollectionLiterals.<Long, String>newHashMap();
    this._navigatorMap = _newHashMap;
    this._navigatorMap.put(Long.valueOf(4l), "recipe");
  }
  
  /**
   * Generated
   */
  public AppController getAppController() {
    return this._appController;
  }
  
  /**
   * Generated
   */
  public HashMap<Long, String> getNavigatorMap() {
    return this._navigatorMap;
  }
  
  /**
   * Generated
   */
  public String getScreenName() {
    return "detailedRecipe";
  }
}
