/*
* This file was generated by Generator.xtend 
* for the WireframeSketcher file screen3.screen
* as part of the project "toduka"
* at Thu, 2 Oct 2014 12:45:44 +0200
*/
package application

import java.util.HashMap
import javafx.event.ActionEvent
import javafx.scene.input.MouseEvent
import javafx.fxml.FXML
import javafx.scene.Node
import javafx.scene.input.MouseButton

/* Generated */
class ScreenNavigatorControllerscreen3 extends AbstractNavigatorController {

	
	// Constructor
	new(Object controller, HashMap<Long, String> map) {
		super()
		_appController = controller as AppController
		
		initNavigatorMap
		println("ScreenNavigatorControllerscreen3 initialized.")
		
	}
	
	/* Generated */
	@FXML
	def handleMouseEvent1(MouseEvent event) {
		if(event.button == MouseButton.PRIMARY){
			val resource = getResourceForScreenFile(screenName + ".screen")
			var id = getPropertyForNode(event.source as Node, "id") 
			if (id != null && id != PropertyResult.NO_SUCH_METHOD){
				resource.performActionForWidgetId(id as String)
			} 
			resource.evaluateRules
		}
		
	}
	/* Generated */
	@FXML
	def handleActionEvent2(ActionEvent event) {
			val resource = getResourceForScreenFile(screenName + ".screen")
			var id = getPropertyForNode(event.source as Node, "id") 
			if (id != null && id != PropertyResult.NO_SUCH_METHOD){
				resource.performActionForWidgetId(id as String)
			} 
			resource.evaluateRules
		
	}
	/* Generated */
	@FXML
	def handleActionEvent4(ActionEvent event) {
			val resource = getResourceForScreenFile(screenName + ".screen")
			var id = getPropertyForNode(event.source as Node, "id") 
			if (id != null && id != PropertyResult.NO_SUCH_METHOD){
				resource.performActionForWidgetId(id as String)
			} 
			resource.evaluateRules
		
	}
	/* Generated */
	@FXML
	def handleActionEvent6(ActionEvent event) {
			val resource = getResourceForScreenFile(screenName + ".screen")
			var id = getPropertyForNode(event.source as Node, "id") 
			if (id != null && id != PropertyResult.NO_SUCH_METHOD){
				resource.performActionForWidgetId(id as String)
			} 
			resource.evaluateRules
		
	}
	/* Generated */
	@FXML
	def handleActionEvent7(ActionEvent event) {
			val resource = getResourceForScreenFile(screenName + ".screen")
			var id = getPropertyForNode(event.source as Node, "id") 
			if (id != null && id != PropertyResult.NO_SUCH_METHOD){
				resource.performActionForWidgetId(id as String)
			} 
			resource.evaluateRules
		
	}
	/* Generated */
	@FXML
	def handleActionEvent8(ActionEvent event) {
			val resource = getResourceForScreenFile(screenName + ".screen")
			var id = getPropertyForNode(event.source as Node, "id") 
			if (id != null && id != PropertyResult.NO_SUCH_METHOD){
				resource.performActionForWidgetId(id as String)
			} 
			resource.evaluateRules
		
	}
	/* Generated */
	@FXML
	def handleMouseEvent17(MouseEvent event) {
		if(event.button == MouseButton.PRIMARY){	
			loadNewFXMLForScreen (event,  "screen1")
		}
	} 
	
	/* Generated */
	@FXML
	def handleMouseEvent18(MouseEvent event) {
		if(event.button == MouseButton.PRIMARY){
			val resource = getResourceForScreenFile(screenName + ".screen")
			var id = getPropertyForNode(event.source as Node, "id") 
			if (id != null && id != PropertyResult.NO_SUCH_METHOD){
				resource.performActionForWidgetId(id as String)
			} 
			resource.evaluateRules
		}
		
	}
	/* Generated */
	@FXML
	def handleActionEvent22(ActionEvent event) {
			val resource = getResourceForScreenFile(screenName + ".screen")
			var id = getPropertyForNode(event.source as Node, "id") 
			if (id != null && id != PropertyResult.NO_SUCH_METHOD){
				resource.performActionForWidgetId(id as String)
			} 
			resource.evaluateRules
		
	}
	/* Generated */
	@FXML
	def handleMouseEvent23(MouseEvent event) {
		if(event.button == MouseButton.PRIMARY){
			val resource = getResourceForScreenFile(screenName + ".screen")
			var id = getPropertyForNode(event.source as Node, "id") 
			if (id != null && id != PropertyResult.NO_SUCH_METHOD){
				resource.performActionForWidgetId(id as String)
			} 
			resource.evaluateRules
		}
		
	}
	/* Generated */
	@FXML
	def handleMouseEvent24(MouseEvent event) {
		if(event.button == MouseButton.PRIMARY){
			val resource = getResourceForScreenFile(screenName + ".screen")
			var id = getPropertyForNode(event.source as Node, "id") 
			if (id != null && id != PropertyResult.NO_SUCH_METHOD){
				resource.performActionForWidgetId(id as String)
			} 
			resource.evaluateRules
		}
		
	}
	/* Generated */
	@FXML
	def handleMouseEvent25(MouseEvent event) {
		if(event.button == MouseButton.PRIMARY){
			val resource = getResourceForScreenFile(screenName + ".screen")
			var id = getPropertyForNode(event.source as Node, "id") 
			if (id != null && id != PropertyResult.NO_SUCH_METHOD){
				resource.performActionForWidgetId(id as String)
			} 
			resource.evaluateRules
		}
		
	}
	/* Generated */
	override def initNavigatorMap(){
		_navigatorMap = <Long, String>newHashMap
		_navigatorMap.put(17l, "screen1")

	}
	/* Generated */
	override getAppController() {
		_appController
	}
	
	/* Generated */
	override getNavigatorMap() {
		_navigatorMap
	}
	
	/* Generated */
	override getScreenName() {
		"screen3"
	}
}